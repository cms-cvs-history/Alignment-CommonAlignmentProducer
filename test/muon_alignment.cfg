process MuonAlignment = {
    include "FWCore/MessageService/data/MessageLogger.cfi"
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
    include "Geometry/CommonDetUnit/data/bareGlobalTrackingGeometry.cfi"
    include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
    include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"
    include "Geometry/RPCGeometry/data/rpcGeometry.cfi"
    include "TrackingTools/TrackRefitter/data/TracksToTrajectories.cff"
    include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilderWithoutRefit.cfi"

    module TrackRefitter = TracksToTrajectories {
	InputTag Tracks = ALCARECOMuAlZMuMu:GlobalMuon
	PSet TrackTransformer = {
	    string Fitter = "KFFitterForRefitOutsideIn"
	    string Smoother = "KFSmootherForRefitOutsideIn"
	    string TrackerRecHitBuilder = "WithoutRefit"
	    string MuonRecHitBuilder = "MuonRecHitBuilder"
	    string RefitDirection = "outsideIn"
	}
    }

    include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
    replace AlignmentProducer.doMisalignmentScenario = true
    replace AlignmentProducer.MisalignmentScenario = {
	string distribution = "gaussian"
	int32 seed = 1234567
	bool setError = true

	PSet DTChambers = {
	    double dXlocal = 1.
	}
	PSet CSCChambers = {
	    double dXlocal = 1.
	}
    }

    replace AlignmentProducer.algoConfig.apeParam = "linear"
    replace AlignmentProducer.algoConfig.apeSPar = {1000., 1000., 1.}
    replace AlignmentProducer.algoConfig.apeRPar = {0., 0., 1.}

    replace AlignmentProducer.tjTkAssociationMapTag = TrackRefitter
    replace AlignmentProducer.doTracker = false
    replace AlignmentProducer.doMuon    = true
    replace AlignmentProducer.ParameterBuilder.Selector.alignParams = {"MuonDTWheels,111111", "MuonCSCStations,111111"}
#     replace AlignmentProducer.ParameterBuilder.Selector.alignParams = {"MuonDTChambers,100000", "MuonCSCChambers,100000"}
#     replace AlignmentProducer.ParameterBuilder.Selector.alignParams = {"MuonDTSuperLayers,111111", "MuonCSCLayers,111111"}

    replace AlignmentProducer.monitorConfig = {
	untracked vstring monitors = {"AlignmentMonitorMuonHIP"}
	PSet AlignmentMonitorMuonHIP = {
	    string outpath = "./"
	    string outfile = "histograms.root"
	    
	    bool collectorActive = false
	    int32 collectorNJobs = 0
	    string collectorPath = "./"

	    PSet params = {
		uint32 iterations = 11
		double iterations_low = -0.5
		double iterations_high = 10.5
		uint32 bins = 100
		double xresid_low = -1.
		double xresid_high = 1.
		double xresidwide_low = -5.
		double xresidwide_high = 5.
		double yresid_low = -5.
		double yresid_high = 5.
		double xDT_low = -300.
		double xDT_high = 300.
		double yDT_low = -300.
		double yDT_high = 300.
		double xCSC_low = -300.
		double xCSC_high = 300.
		double yCSC_low = -300.
		double yCSC_high = 300.
		double xpull_low = -15.
		double xpull_high = 15.
		double ypull_low = -15.
		double ypull_high = 15.
	    }

	    PSet book = {
		string mode = "selected"
		bool nhits_vsiter = true
		bool conv_x = true
		bool conv_y = true
		bool conv_z = true
		bool conv_phix = true
		bool conv_phiy = true
		bool conv_phiz = true
		bool xresid = true
		bool xresidwide = true
		bool yresid = true
		bool wxresid = true
		bool wxresidwide = true
		bool wyresid = true
		bool wxresid_vsx = true
		bool wxresid_vsy = true
		bool wyresid_vsx = true
		bool wyresid_vsy = true
		bool xpull = true
		bool ypull = true
		bool before = true
		bool after = true
	    }

	    bool createPythonGeometry = false
	}
    }

    source = PoolSource { 
        untracked vstring fileNames = {
# 	    "rfio:///castor/cern.ch/user/p/pivarski/AlCaRecoMu/zmumu/zmumu001.root",
# 	    "rfio:///castor/cern.ch/user/p/pivarski/AlCaRecoMu/zmumu/zmumu002.root"
	    "rfio:///castor/cern.ch/user/p/pivarski/muplus100.root"
	}
        untracked uint32 skipEvents = 0
    }	
    untracked PSet maxEvents = {untracked int32 input = 100}

    path p = {TrackRefitter}
}
