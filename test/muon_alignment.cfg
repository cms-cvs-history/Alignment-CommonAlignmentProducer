process Alignment = {
    
    # initialize  MessageLogger
    service = MessageLogger { 
        untracked vstring destinations = { "cout", "alignment" } # .log automatically
	untracked vstring statistics = { "cout", "alignment"}
        
	untracked vstring categories = { "Alignment" }
	
	untracked PSet cout= { 
	    untracked string threshold = "DEBUG" 
	    untracked bool noLineBreaks = true 
	}
	untracked PSet alignment  = { 
	    untracked string threshold = "INFO" 
	    untracked PSet INFO = { untracked int32 limit = 0 }
	    untracked PSet WARNING = { untracked int32 limit = 0 }
	    untracked PSet ERROR = { untracked int32 limit = 0 }
	    untracked PSet DEBUG = { untracked int32 limit = 0 }
	    untracked PSet Alignment = { untracked int32 limit = -1}
	    untracked bool noLineBreaks = true 
	}
        #   vstring debugModules = { "*" }
    }
    
    # initialize magnetic field
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
    
    # ideal geometry and interface
    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
    
    # track selection for alignment
    module AlignmentTracks = AlignmentTrackSelectorModule {
	InputTag src = globalMuons
	bool filter = false
	
	bool applyBasicCuts = true
	double ptMin   = 10. 
	double ptMax   = 999.
	double etaMin  = -2.4
	double etaMax  =  2.4
	double phiMin  = -3.1416
	double phiMax  =  3.1416
	double nHitMin =  8
	double nHitMax = 99
	double chi2nMax= 999999.
	
	bool applyNHighestPt = false
	int32 nHighestPt = 2
	
	bool applyMultiplicityFilter = true
	int32 minMultiplicity = 1
    }
    
    # Alignment producer
    include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
    replace AlignmentProducer.doMisalignmentScenario = true
    
    # Track refitter (adapted to alignment needs)
    include "Geometry/CommonDetUnit/data/bareGlobalTrackingGeometry.cfi"
    include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
    include "TrackingTools/TrackRefitter/data/TracksToTrajectories.cff"
    module TrackRefitter = TracksToTrajectories {
	InputTag Tracks = AlignmentTracks
	PSet TrackTransformer = {
	    string Fitter = "KFFitterForRefitOutsideIn"
	    string Smoother = "KFSmootherForRefitOutsideIn"
	    string TrackerRecHitBuilder = "WithTrackAngle"
	    string MuonRecHitBuilder = "MuonRecHitBuilder"
	    string RefitDirection = "outsideIn"
	}
    }

    # Get tracks from AlignmentTracks and trajectories from TrackRefitter
    replace AlignmentProducer.tkTag = AlignmentTracks
    replace AlignmentProducer.tjTag = TrackRefitter

    # Set up AlignmentProducer to do a muon alignment
    replace AlignmentProducer.doTracker = false
    replace AlignmentProducer.doMuon    = true
#     replace AlignmentProducer.ParameterBuilder.Selector.alignParams = {"AllMuonChambers,111111"}
    replace AlignmentProducer.ParameterBuilder.Selector.alignParams = {"MuonDTSuperLayers,111111", "MuonCSCLayers,111111"}

#     # To read an alignment from the database:
#     es_source = PoolDBESSource { 
# 	VPSet toGet = {
# 	    {
# 		string record = "DTAlignmentRcd"
# 		string tag = "DTAlignments"
# 	    },
# 	    {
# 		string record = "DTAlignmentErrorRcd"
# 		string tag = "DTAlignmentErrors"
# 	    },
# 	    {
# 		string record = "CSCAlignmentRcd"
# 		string tag = "CSCAlignments"
# 	    },
# 	    {
# 		string record = "CSCAlignmentErrorRcd"
# 		string tag = "CSCAlignmentErrors"
# 	    }
# 	}
# 	bool loadAll = true
# 	string connect = "sqlite_file:input_alignment.db"
# 	untracked string catalog = "file:condbcatalog.xml"
# 	string timetype = "runnumber" 
# 	untracked uint32 authenticationMethod = 1
# 	untracked uint32 messagelevel = 2
#     }
#    replace AlignmentProducer.applyDbAlignment = true


#     # To write an alignment to the database:
#     service = PoolDBOutputService {
# 	string timetype = "runnumber"    
# 	string connect = "sqlite_file:output_alignment.db"
# 	untracked uint32 authenticationMethod = 1
# 	untracked string catalog = "file:condbcatalog.xml"
# 	VPSet toPut = {
# 	    { 
# 		untracked string containerName = "dtAlignments" 
# 		string tag = "DTAlignments" 
# 	    },
# 	    { 
# 		untracked string containerName = "dtAlignmentErrors" 
# 		string tag = "DTAlignmentErrors" 
# 	    },
# 	    { 
# 		untracked string containerName = "cscAlignments" 
# 		string tag = "CSCAlignments" 
# 	    },
# 	    { 
# 		untracked string containerName = "cscAlignmentErrors" 
# 		string tag = "CSCAlignmentErrors" 
# 	    }
# 	}
#     }
#    replace AlignmentProducer.saveToDB = true

    # input file
    source = PoolSource { 
        untracked vstring fileNames = {"file://muon_alignment_sample.root"}
        untracked int32 maxEvents   = -1
        untracked uint32 skipEvents = 0
    }	
    
    module eventcontent = EventContentAnalyzer {}

    path p = { AlignmentTracks, TrackRefitter }
    
    # REPLACEME (needed for inserting replace statements by perl script!)
    
}

