process Alignment = {
    
    # initialize  MessageLogger
    service = MessageLogger { 
        untracked vstring destinations = { "cout", "alignment" } # .log automatically
		untracked vstring statistics = { "cout", "alignment"}
        
		untracked vstring categories = { "Alignment" }
		
		untracked PSet cout= { 
			untracked string threshold = "DEBUG" 
			untracked bool noLineBreaks = true 
		}
		untracked PSet alignment  = { 
			untracked string threshold = "INFO" 
			untracked PSet INFO = { untracked int32 limit = 0 }
			untracked PSet WARNING = { untracked int32 limit = 0 }
			untracked PSet ERROR = { untracked int32 limit = 0 }
			untracked PSet DEBUG = { untracked int32 limit = 0 }
			untracked PSet Alignment = { untracked int32 limit = -1}
			untracked bool noLineBreaks = true 
		}
        #   vstring debugModules = { "*" }
	}
	
	# initialize magnetic field
	include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
	
	# ideal geometry and interface
	include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
	include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
	
	# track selection for alignment
	module AlignmentTracks = AlignmentTrackSelectorModule {
		InputTag src = ctfWithMaterialTracks
		bool filter = false
		
		bool applyBasicCuts = true
		double ptMin   = 10. 
		double ptMax   = 999.
		double etaMin  = -2.4
		double etaMax  =  2.4
		double phiMin  = -3.1416
		double phiMax  =  3.1416
		double nHitMin =  8
		double nHitMax = 99
		double chi2nMax= 999999.
		
		bool applyNHighestPt = false
		int32 nHighestPt = 2
		
		bool applyMultiplicityFilter = true
		int32 minMultiplicity = 1
	}
	
	# Alignment producer
	include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
    replace AlignmentProducer.doMisalignmentScenario = true
    
    # Track refitter (adapted to alignment needs)
    include "Alignment/CommonAlignmentProducer/data/AlignmentProducerRefitting.cff"
    replace TrackRefitter.src = "AlignmentTracks"
    replace TrackRefitter.TTRHBuilder = "WithoutRefit"
    replace TrackRefitter.TrajectoryInEvent = true
    
    # input file
    source = PoolSource { 
		
        untracked vstring fileNames = { 
#'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/0490CFD6-6695-DB11-AB1D-00145E1D63A2.root',
#'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/04D46AB6-6695-DB11-82A9-00145E1D6432.root',
#'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/0E8AB8E1-6495-DB11-8F98-00145E1D64B6.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/F0D454C3-6495-DB11-8A7F-00145E1D644A.root'
        }
        untracked int32 maxEvents   = 200
        untracked uint32 skipEvents = 0
    }	
    
    path p = { AlignmentTracks, TrackRefitter }
    
    # REPLACEME (needed for inserting replace statements by perl script!)

}

