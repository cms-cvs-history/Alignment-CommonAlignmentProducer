process Alignment = {
	
	# initialize  MessageLogger
	# include "FWCore/MessageLogger/data/MessageLogger.cfi"
	service = MessageLogger { 
		untracked vstring destinations = { "cout", "alignment" } # .log automatically
		untracked vstring statistics = { "cout", "alignment"}

		untracked vstring categories = { "Alignment" }
		
		untracked PSet cout    = { 
			untracked string threshold = "DEBUG" 
			untracked bool noLineBreaks = true 
		}
		untracked PSet alignment  = { 
			untracked string threshold = "INFO" 
			untracked PSet INFO = { untracked int32 limit = 0 }
			untracked PSet WARNING = { untracked int32 limit = 0 }
			untracked PSet ERROR = { untracked int32 limit = 0 }
			untracked PSet DEBUG = { untracked int32 limit = 0 }
			untracked PSet Alignment = { untracked int32 limit = -1}
			untracked bool noLineBreaks = true 
		}
    #       vstring debugModules = { "*" }
	}
	
	# initialize magnetic field
	include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
	
	# ideal geometry and interface
	include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
	include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
	
	# track selection for alignment
	module AlignmentTracks = AlignmentTrackSelectorModule {
		InputTag src = ctfWithMaterialTracks
		bool filter = false
		
		bool applyBasicCuts = true
		double ptMin   = 10. 
		double ptMax   = 999.
		double etaMin  = -2.4.
		double etaMax  =  2.4.
		double phiMin  = -3.1416
		double phiMax  =  3.1416
		double nHitMin =  8
		double nHitMax = 99
		double chi2nMax= 999999.
		
		bool applyNHighestPt = false
		int32 nHighestPt = 2
		
		bool applyMultiplicityFilter = true
		int32 minMultiplicity = 1
	}
	
	# Alignment producer (incl refitter)
	include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
        replace CSA06AlignmentAlgorithm.debug     = true
        replace CSA06AlignmentAlgorithm.verbosity = true

    include "RecoTracker/TrackProducer/data/RefitterWithMaterial.cff"
    replace TrackRefitter.src = "ctfWithMaterialTracks"
    replace TrackRefitter.TrajectoryInEvent = true
    // Replace TTRB with refit by without refit
    replace TrackRefitter.TTRHBuilder = "WithoutRefit"
    replace ttrhbwr.ComponentName = "WithoutRefit"
    replace ttrhbwr.StripCPE = "Fake"
    replace ttrhbwr.PixelCPE = "Fake"
	
	# input file
	source = PoolSource { 
		
		untracked vstring fileNames = { 
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/0490CFD6-6695-DB11-AB1D-00145E1D63A2.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/04D46AB6-6695-DB11-82A9-00145E1D6432.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/0E8AB8E1-6495-DB11-8F98-00145E1D64B6.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/1C05EAC2-6495-DB11-932C-00145E1DB4D8.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/72EA9BB3-5E95-DB11-AFC3-00C09FD9499A.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/762CDBBE-6495-DB11-97D3-00145E1D63A2.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/7C49BCB3-6695-DB11-8A54-00145E1DB4EA.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/8A38336B-5E95-DB11-84DB-00C09FD94A50.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/987A6BED-6295-DB11-8314-00145E1D6432.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/9E2FB989-5E95-DB11-A945-00145E1D647A.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/A87E8A18-5F95-DB11-966C-00145E1D65D0.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/BE4B30D6-6895-DB11-A0CA-00145E1DB4EA.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/C008A886-5E95-DB11-A882-00145E1D6432.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/C27A5D6C-5E95-DB11-92E0-00C09FBD3FEE.root',
'/store/mc/2006/12/21/mc-physval-120-SingleMuMinus-Pt100/0000/F0D454C3-6495-DB11-8A7F-00145E1D644A.root'
		}
		untracked int32 maxEvents   = 10000000
		untracked uint32 skipEvents = 0
	
	}	    
	
	path p = { TrackRefitter, AlignmentTracks }
	
	# REPLACEME (needed for inserting replace statements by perl script!)

}

