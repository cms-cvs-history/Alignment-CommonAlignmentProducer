process Alignment = {
	
	# initialize  MessageLogger
	# include "FWCore/MessageLogger/data/MessageLogger.cfi"
	service = MessageLogger { 
		untracked vstring destinations = { "cout","alignment.log" }
		untracked vstring categories = { "Alignment" }
		
		untracked PSet cout    = { 
			untracked string threshold = "INFO" 
			untracked bool noLineBreaks = true 
		}
		untracked PSet alignment.log  = { 
			untracked string threshold = "WARNING" 
			untracked PSet INFO = { untracked int32 limit = 0 }
			untracked PSet WARNING = { untracked int32 limit = 0 }
			untracked PSet ERROR = { untracked int32 limit = 0 }
			untracked PSet DEBUG = { untracked int32 limit = 0 }
			untracked PSet Alignment = { untracked int32 limit = -1}
			untracked bool noLineBreaks = true 
		}
	}
	
	# initialize magnetic field
	include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
	
	# ideal geometry and interface
	include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
	include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
	
	# track selection for alignment
	module AlignmentTracks = AlignmentTrackSelectorModule {
		InputTag src = TkAlDST
		bool filter = false
		
		bool applyBasicCuts = true
		double ptMin   = 5. 
		double ptMax   = 999.
		double etaMin  = -2.4.
		double etaMax  =  2.4.
		double phiMin  = -3.1416
		double phiMax  =  3.1416
		double nHitMin = 10
		double nHitMax = 99
		double chi2nMax= 999999.
		
		bool applyNHighestPt = false
		int32 nHighestPt = 2
		
		bool applyMultiplicityFilter = true
		int32 minMultiplicity = 1
	}
	
	# Alignment producer (incl refitter)
	include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
	
	# input file
	source = PoolSource { 
		
		untracked vstring fileNames = { 
			"file:/afs/cern.ch/user/f/fpschill/w1/cmssw/data/singlemu-.pt100.tkaldst.090.root",
			"file:/afs/cern.ch/user/f/fpschill/w1/cmssw/data/singlemu+.pt100.tkaldst.090.root"
		}
		untracked int32 maxEvents   = 100
		untracked uint32 skipEvents = 0
	
	}	    
	
	path p = { AlignmentTracks }
	
	# REPLACEME (needed for inserting replace statements by perl script!)

}

