
include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cfi"

# misalignment scenarios
include "Alignment/TrackerAlignment/data/Scenarios.cff"

# algorithms
include "Alignment/CommonAlignmentProducer/data/Algorithms.cff"

#  replace TrackerShortTermScenario.TPBs.scale = 10.
#  replace TrackerShortTermScenario.TPEs.scale = 10.

looper = AlignmentProducer
{
    untracked uint32 maxLoops = 1
	
    # dof to be aligned x,y,z,alpha,beta,gamma in local frame   
    string parameterSelector = "111000"
	
    # selection of alignables to be aligned
    string alignableSelector = "PixelHalfBarrelLayers"
    # string alignableSelector = "AllDets"
	
    # number of selected alignables to be kept fixed
    int32 nFixAlignables = 0
	
    # simple misalignment applied to selected alignables and dof
    double randomShift = 0.
    double randomRotation = 0.
	
    # misalignment scenario
    bool doMisalignmentScenario = false
    PSet MisalignmentScenario = { using TrackerShortTermScenario }
	
    # alignment algorithm name
    string algoName = "CSA06AlignmentAlgorithm"
	PSet algoConfig = {
		using DefaultRefitter
		using CSA06AlignmentAlgorithm
    }
	
    # do we save to DB?
    bool saveToDB = false

}

# Database output service
service = PoolDBOutputService  {
    string connect = "sqlite_file:Alignments.db"    
    string timetype = "runnumber"    
    untracked uint32 authenticationMethod = 1
    untracked string catalog = "file:condbcatalog.xml"
    VPSet toPut = {
		{ untracked string containerName = "Alignments" 
			string tag = "Alignments_init" },
		{ untracked string containerName = "AlignmentErrors" 
			string tag = "AlignmentErrors_init" }
    }
}
