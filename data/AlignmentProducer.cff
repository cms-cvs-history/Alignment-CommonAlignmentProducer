
include "Alignment/CommonAlignmentProducer/data/AlignmentProducerRefitting.cff"

# misalignment scenarios
include "Alignment/TrackerAlignment/data/Scenarios.cff"
#  replace TrackerShortTermScenario.TPBs.scale = 10.
#  replace TrackerShortTermScenario.TPEs.scale = 10.

# algorithms
include "Alignment/CommonAlignmentProducer/data/Algorithms.cff"


looper = AlignmentProducer
{
    untracked uint32 maxLoops = 1

    PSet AlignmentParameterBuilder = {
        PSet AlignmentParameterSelector = {
            # selection of alignables and their parameters:
            # comma separated pairs of detector parts/levels as defined in AlinmentParameterSelector
            # (note special meaning if the string contains "SS" or "DS" or ends with "Layers"
            # followed by two digits)
            # and of d.o.f. to be aligned (x,y,z,alpha,beta,gamma) in local frame
            vstring alignableParamSelector = {
                    "PixelHalfBarrelLayers,111000" # cf. below: ,pixelAliSel",
                    #,"BarrelDSRods,111000", "TECDets,101010" #, #can add more...
                    #"BarrelSSRods,101000"
            }
            # Old predefined scenarios can be achieved by the following combined selections:
            #
            # "ScenarioA" -> "PixelHalfBarrelDets,111000","BarrelDSRods,111000",
            #                "BarrelSSRods,101000"
            # "ScenarioB" -> "PixelHalfBarrelLadders,111000","BarrelDSLayers,111000",
            #                "BarrelSSLayers,110000"
            # "CustomStripLayers" -> "BarrelDSLayers,111000","BarrelSSLayers,110000",
            #                        "TIDLayers,111000","TECLayers,110000"
            # "CustomStripRods" -> "BarrelDSRods,111000","BarrelSSRods,101000",
            #                      "TIDRings,111000","TECPetals,110000"
            # "CSA06Selection" -> "TOBDSRods,111111","TOBSSRodsLayers15,100111",
            #                     "TIBDSDets,111111","TIBSSDets,100111"
            #
            # If a component in 'alignableParamSelector' contains a third comma-separated
            # part, a PSet with that name is expected, defining arrays for ranges in
            # eta, r, z and phi. These arrays must have an even number of entries and
            # the alignables are required to fulfil
            # ('x'Range[0] <= 'x' < 'x'Range[1]) || ('x'Range[2] <= 'x' < 'x'Range[3]) || etc.
            # PSet pixelAliSel = { # name defined above
            #   vdouble etaRanges =  {-2., -0.2, 0.2, 2.} # makes not much sense or pixel...
            #   vdouble zRanges   =  {} # empty array means no restriction
            #   vdouble rRanges   =  {0., 5.} # small radii only (i.e. first pixel layer)
            #   vdouble phiRanges =  {1.5, -0.5} # a phi-slice covering the +-pi sign flip
            # }
        }
    }
    # number of selected alignables to be kept fixed
    int32 nFixAlignables = 0

    # simple misalignment applied to selected alignables and selected dof
    string parameterSelectorSimple = "111000" # "-1" means to move the active parameters
    double randomShift = 0.02
    double randomRotation = 0.
	
    # Misalignment from database
    untracked bool applyDbAlignment = false # if true, uncomment es_source = PoolDBESSource below

    # misalignment scenario
    bool doMisalignmentScenario = false
    PSet MisalignmentScenario = { 
      using TrackerShortTermScenario 

      #untracked bool fixTPB = 0
      #untracked bool fixTPE = 1
      #untracked bool fixTIB = 1
      #untracked bool fixTOB = 1
      #untracked bool fixTID = 1
      #untracked bool fixTEC = 1
    }
	
    # alignment algorithm, defined in Algorithms.cff:
    PSet algoConfig = {
                using DefaultRefitter
                # choose one algorithm
		using CSA06AlignmentAlgorithm
                # using MillePedeAlignmentAlgorithm
                # using KalmanAlignmentAlgorithm
    }

	
    # do we save to DB?
    bool saveToDB = false

}

# Database input service 
# (uncomment if AlignmentProducer::AlignmentParameterBuilder::applyDbAlignment == false)
es_source = PoolDBESSource { 
  VPSet toGet = {
    { string record = "TrackerAlignmentRcd" string tag = "TrackerCSA06Scenario" },
    { string record = "TrackerAlignmentErrorRcd" string tag = "TrackerCSA06ScenarioErrors" }
  }
  bool loadAll = true
  string timetype = "runnumber" 
  untracked uint32 authenticationMethod = 1 // 1
  untracked uint32 messagelevel = 0 // 0

# (a) sq lite files (has to match toGet tag's used above)
# string connect = "sqlite_file:CSA06Scenario.db"
# untracked string catalog = "file:condbcatalog.xml"
# (b) ORACLE
  string connect = "oracle://cms_orcoff_int2r/CMS_COND_ALIGNMENT"
  untracked string catalog = "relationalcatalog_oracle://cms_orcoff_int2r/CMS_COND_GENERAL"
  untracked bool siteLocalConfig = false // oracle
# (c) FRONTIER
# string connect = "frontier://cms_conditions_data/CMS_COND_ALIGNMENT"
# untracked bool siteLocalConfig = true // frontier
}

# Database output service
service = PoolDBOutputService  {
    string connect = "sqlite_file:Alignments.db"    
    string timetype = "runnumber"    
    untracked uint32 authenticationMethod = 1
    untracked string catalog = "file:condbcatalog.xml"
    VPSet toPut = {
		{ untracked string containerName = "Alignments" 
			string tag = "Alignments_init" },
		{ untracked string containerName = "AlignmentErrors" 
			string tag = "AlignmentErrors_init" }
    }
}
