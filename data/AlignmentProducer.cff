
include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cfi"

# misalignment scenarios
include "Alignment/TrackerAlignment/data/Scenarios.cff"

#  replace TrackerShortTermScenario.TPBs.scale = 10.
#  replace TrackerShortTermScenario.TPEs.scale = 10.

looper = AlignmentProducer
{
    untracked uint32 maxLoops = 1
	
    # dof to be aligned x,y,z,alpha,beta,gamma in local frame   
    string parameterSelector = "111000"
	
    # selection of alignables to be aligned
    string alignableSelector = "PixelHalfBarrelLayers"
    # string alignableSelector = "AllDets"
	
    # number of selected alignables to be kept fixed
    int32 nFixAlignables = 0
	
    # simple misalignment applied to selected alignables and dof
    double randomShift = 0.02
    double randomRotation = 0.
	
    # misalignment scenario
    bool doMisalignmentScenario = false
    PSet MisalignmentScenario = { using TrackerShortTermScenario }
	
    # alignment algorithm
    string algorithm = "CSA06AlignmentAlgorithm"
	
    # parameters for CSA06AlignmentAlgorithm
	# include "Alignment/CSA06AlignmentAlgorithm/data/CSA06AlignmentAlgorithm.cfi"
	
    PSet CSA06AlignmentAlgorithm = {
		
		// For the refitter
		string Fitter = "KFFittingSmoother"   
		string Propagator = "PropagatorWithMaterial" 
		string TTRHBuilder = "WithoutRefit"
		string src = "AlignmentTracks"
		
		// Dump tracks before and after refit
		bool debug = true
	
		bool verbosity = false
		string outpath = "./"
		
		string outfile        = "CSA06AlignmentEvents.root"
		string outfile2       = "CSA06AlignmentAlignables.root"
		string trueFile       = "IOTruePositions.root"
		string misalignedFile = "IOMisalignedPositions.root"
		string alignedFile    = "IOAlignedPositions.root"
		string iterationFile  = "IOIteration.root"
		string uvarFile       = "IOUserVariables.root"
		string parameterFile  = "IOAlignmentParameters.root"
		
		string apeParam = "linear"  // linear or exponential
		vdouble apeSPar = { 0.0, 0.0, 3. }
		vdouble apeRPar = { 0.0,  0.0, 3. }
		
		int32 minimumNumberOfHits = 50
		double maxRelParameterError = 1.0
		
		bool collectorActive = false
		int32 collectorNJobs = 0
		string collectorPath = ""
	
    }
	
    # do we save to DB?
    bool saveToDB = false

}  

# Database output service
service = PoolDBOutputService  {
    string connect = "sqlite_file:Alignments.db"    
    string timetype = "runnumber"    
    untracked uint32 authenticationMethod = 1
    untracked string catalog = "file:condbcatalog.xml"
    VPSet toPut = {
		{ untracked string containerName = "Alignments" 
			string tag = "Alignments_init" },
		{ untracked string containerName = "AlignmentErrors" 
			string tag = "AlignmentErrors_init" }
    }
}
